# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from flask import Flask
from threading import Thread
import os

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ---
app = Flask('')

@app.route('/')
def home():
    return "I'm alive"

def run():
  app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()
# --- –ö–æ–Ω–µ—Ü —á–∞—Å—Ç–∏ —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º ---


# --- –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
import telebot
from telebot import types
from youtubesearchpython import VideosSearch
import yt_dlp
import requests
from PIL import Image
from io import BytesIO
import math

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.environ.get("BOT_TOKEN") 
DOWNLOAD_PATH = 'downloads' 
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

if not os.path.exists(DOWNLOAD_PATH):
    os.makedirs(DOWNLOAD_PATH)

user_data = {}
bot = telebot.TeleBot(BOT_TOKEN)

# ... (–í–ï–°–¨ –ö–û–î –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê –û–°–¢–ê–ï–¢–°–Ø –ó–î–ï–°–¨) ...
# download_video, create_preview_collage, send_welcome, 
# send_search_results, send_page, handle_text, callback_handler
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è.
# –ù–∞—á–∞–ª–æ —Å: def download_video(video_id, chat_id):
# ... –∏ –¥–æ –∫–æ–Ω—Ü–∞: if chat_id in user_data: del user_data[chat_id]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---

def download_video(video_id, chat_id):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."""
    url = f'https://www.youtube.com/watch?v={video_id}'
    output_template = os.path.join(DOWNLOAD_PATH, f'{chat_id}_{video_id}.mp4')
    
    ydl_opts = {
        'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        'outtmpl': output_template,
        'format_sort': ['filesize'],
        'max_filesize': 50 * 1024 * 1024, # 50MB
        'merge_output_format': 'mp4',
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        if os.path.exists(output_template):
            return output_template
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ {video_id}: {e}")
        return None

def create_preview_collage(results, chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂ –∏–∑ 10 –ø—Ä–µ–≤—å—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    thumbnails = []
    for video in results:
        try:
            thumb_url = video['thumbnails'][0]['url']
            response = requests.get(thumb_url)
            img = Image.open(BytesIO(response.content))
            img = img.resize((160, 90))
            thumbnails.append(img)
        except Exception:
            thumbnails.append(Image.new('RGB', (160, 90)))
            
    if not thumbnails: return None

    cols, rows = 5, 2
    collage = Image.new('RGB', (cols * 160, rows * 90))
    
    for i, thumb in enumerate(thumbnails):
        collage.paste(thumb, ((i % cols) * 160, (i // cols) * 90))

    collage_path = os.path.join(DOWNLOAD_PATH, f'preview_{chat_id}.jpg')
    collage.save(collage_path)
    return collage_path

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –≤–∏–¥–µ–æ –Ω–∞ YouTube.")

def send_search_results(chat_id, query, page=0):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    try:
        msg = bot.send_message(chat_id, f"üîç –ò—â—É –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*...", parse_mode="Markdown")
        search = VideosSearch(query, limit=20)
        all_results = search.result()['result']

        if not all_results:
            bot.edit_message_text("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id, msg.message_id)
            return

        user_data[chat_id] = {'query': query, 'results': all_results, 'page': page}
        send_page(chat_id, msg.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        bot.send_message(chat_id, "‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def send_page(chat_id, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    data = user_data.get(chat_id)
    if not data:
        bot.send_message(chat_id, "–í–∞—à –ø–æ–∏—Å–∫ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
        
    page = data['page']
    results_to_show = data['results'][page*10 : page*10 + 10]

    if not results_to_show:
        bot.send_message(chat_id, "–ë–æ–ª—å—à–µ –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    collage_path = create_preview_collage(results_to_show, chat_id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for i, video in enumerate(results_to_show):
        num = page * 10 + i + 1
        title = (video['title'][:30] + '..') if len(video['title']) > 30 else video['title']
        buttons.append(types.InlineKeyboardButton(f"{num}. {title}", callback_data=f"dl_{video['id']}_{page}"))
    markup.add(*buttons)
    
    nav_buttons = []
    if page > 0: nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if len(data['results']) > (page + 1) * 10: nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}"))
    nav_buttons.append(types.InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"))
    markup.add(*nav_buttons)

    text = f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{data['query']}*\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"

    if collage_path:
        with open(collage_path, 'rb') as photo:
            if message_id: bot.delete_message(chat_id, message_id)
            bot.send_photo(chat_id, photo, caption=text, reply_markup=markup, parse_mode="Markdown")
        os.remove(collage_path)
    else:
        if message_id: bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
        else: bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    send_search_results(message.chat.id, message.text, page=0)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    data = call.data
    
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    if data.startswith("dl_"):
        video_id = data.split('_')[1]
        bot.send_message(chat_id, "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
        video_path = download_video(video_id, chat_id)
        
        if video_path:
            with open(video_path, 'rb') as video_file:
                bot.send_video(chat_id, video_file, caption="‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!", supports_streaming=True)
            os.remove(video_path)
        else:
            bot.send_message(chat_id, "üò• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"))
        bot.send_message(chat_id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)

    elif data.startswith("page_"):
        page = int(data.split('_')[1])
        user_data[chat_id]['page'] = page
        bot.delete_message(chat_id, call.message.message_id)
        send_page(chat_id)

    elif data == "new_search":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        if chat_id in user_data: del user_data[chat_id]

# --- –ó–ê–ü–£–°–ö –í–°–ï–ì–û ---
keep_alive() # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
