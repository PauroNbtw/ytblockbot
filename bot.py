import telebot
from telebot import types
from youtubesearchpython import VideosSearch
import yt_dlp
import os
import requests
from PIL import Image
from io import BytesIO
import math

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# !!! –í–ê–ñ–ù–û: –ù–µ –≤–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞. –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
BOT_TOKEN = os.environ.get("BOT_TOKEN") 
# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤–∏–¥–µ–æ –∏ –ø—Ä–µ–≤—å—é)
DOWNLOAD_PATH = 'downloads' 
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
if not os.path.exists(DOWNLOAD_PATH):
    os.makedirs(DOWNLOAD_PATH)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_id: {'query': '—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞', 'results': [...], 'page': 0}}
user_data = {}

bot = telebot.TeleBot(BOT_TOKEN)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---

def download_video(video_id, chat_id):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."""
    url = f'https://www.youtube.com/watch?v={video_id}'
    output_template = os.path.join(DOWNLOAD_PATH, f'{chat_id}_{video_id}.mp4')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp: –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç mp4 —Å –≤–∏–¥–µ–æ –∏ –∑–≤—É–∫–æ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π 50MB (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
    ydl_opts = {
        'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        'outtmpl': output_template,
        'format_sort': ['filesize'], # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–æ 50–ú–ë
        'max_filesize': 50 * 1024 * 1024, # 50MB
        'merge_output_format': 'mp4',
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–∞—á–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(output_template):
            return output_template
        else:
            return None # –§–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∏ –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ {video_id}: {e}")
        return None

def create_preview_collage(results, chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂ –∏–∑ 10 –ø—Ä–µ–≤—å—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    thumbnails = []
    for video in results:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é HQ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
            thumb_url = video['thumbnails'][0]['url']
            response = requests.get(thumb_url)
            img = Image.open(BytesIO(response.content))
            # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —á—Ç–æ–±—ã –∫–æ–ª–ª–∞–∂ –Ω–µ –±—ã–ª –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–º
            img = img.resize((160, 90))
            thumbnails.append(img)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø—Ä–µ–≤—å—é, —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
            thumbnails.append(Image.new('RGB', (160, 90)))
            
    if not thumbnails:
        return None

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø—Ä–µ–≤—å—é –≤ 2 —Ä—è–¥–∞ –ø–æ 5 —à—Ç—É–∫
    cols, rows = 5, 2
    collage_width = cols * 160
    collage_height = rows * 90
    collage = Image.new('RGB', (collage_width, collage_height))
    
    for i, thumb in enumerate(thumbnails):
        x = (i % cols) * 160
        y = (i // cols) * 90
        collage.paste(thumb, (x, y))

    collage_path = os.path.join(DOWNLOAD_PATH, f'preview_{chat_id}.jpg')
    collage.save(collage_path)
    return collage_path

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –≤–∏–¥–µ–æ –Ω–∞ YouTube.")

def send_search_results(chat_id, query, page=0):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    try:
        msg = bot.send_message(chat_id, f"üîç –ò—â—É –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*...", parse_mode="Markdown")
        
        # –ò—â–µ–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∑–∞–ø–∞—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        search = VideosSearch(query, limit=20)
        all_results = search.result()['result']

        if not all_results:
            bot.edit_message_text("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id, msg.message_id)
            return

        user_data[chat_id] = {'query': query, 'results': all_results, 'page': page}
        
        send_page(chat_id, msg.message_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        bot.send_message(chat_id, "‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def send_page(chat_id, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    data = user_data.get(chat_id)
    if not data:
        bot.send_message(chat_id, "–í–∞—à –ø–æ–∏—Å–∫ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
        
    page = data['page']
    start_index = page * 10
    end_index = start_index + 10
    results_to_show = data['results'][start_index:end_index]

    if not results_to_show:
        bot.send_message(chat_id, "–ë–æ–ª—å—à–µ –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –ø—Ä–µ–≤—å—é
    collage_path = create_preview_collage(results_to_show, chat_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for i, video in enumerate(results_to_show):
        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –¥–æ 10
        num = start_index + i + 1
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = (video['title'][:30] + '..') if len(video['title']) > 30 else video['title']
        # Callback_data: 'dl_VIDEOID_PAGENUMBER'
        buttons.append(types.InlineKeyboardButton(f"{num}. {title}", callback_data=f"dl_{video['id']}_{page}"))
    markup.add(*buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫–Ω–æ–ø–∫–∏)", callback_data=f"page_{page-1}"))
    if len(data['results']) > end_index:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ 10", callback_data=f"page_{page+1}"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    nav_buttons.append(types.InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"))
    markup.add(*nav_buttons)

    text = (
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{data['query']}*\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}. –ü—Ä–µ–≤—å—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É:\n"
        "1-5 –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä—è–¥—É, 6-10 –≤ –Ω–∏–∂–Ω–µ–º.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:"
    )

    if collage_path:
        with open(collage_path, 'rb') as photo:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            if message_id:
                bot.delete_message(chat_id, message_id)
            bot.send_photo(chat_id, photo, caption=text, reply_markup=markup, parse_mode="Markdown")
        os.remove(collage_path) # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–∞–∂ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else: # –ï—Å–ª–∏ –∫–æ–ª–ª–∞–∂ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
        else:
            bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    send_search_results(message.chat.id, message.text, page=0)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    data = call.data
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–≤–∏—Å—è—â–∏—Ö" —á–∞—Å–æ–≤
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    if data.startswith("dl_"):
        parts = data.split('_')
        video_id = parts[1]
        
        bot.send_message(chat_id, "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 10 –¥–æ 60 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        video_path = download_video(video_id, chat_id)
        
        if video_path:
            with open(video_path, 'rb') as video_file:
                bot.send_video(chat_id, video_file, caption="‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!", supports_streaming=True)
            os.remove(video_path) # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            bot.send_message(chat_id, "üò• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–±–æ–ª—å—à–µ 50 –ú–ë). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.")
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"))
        bot.send_message(chat_id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)

    elif data.startswith("page_"):
        page = int(data.split('_')[1])
        user_data[chat_id]['page'] = page
        bot.delete_message(chat_id, call.message.message_id) # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–ª–∞–∂–µ–º
        send_page(chat_id) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    elif data == "new_search":
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ø–∞–º—è—Ç—å
        if chat_id in user_data:
            del user_data[chat_id]


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()